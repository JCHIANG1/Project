class Employee:
    raise_amt = 1.04
    def __init__(self,first,last,pay):
        self.first=first
        self.last=last
        self.pay=pay
        
    def fullname(self):
        return "{} {}".format(self.first,self.last)
        
    def apply_raise(self):
        self.pay = int(self.pay*self.raise_amt)
        
        
class Developer(Employee):
    raise_amt = 1.10
    
    def __init__(self,first,last,pay,prog_lang):
        super().__init__(first,last,pay)
        #OR you can do this
        Employee.__init__(self,first,last,pay)
        
        self.prog_lang = prog_lang
        
        
class Manager(Employee):
    
    def __init__(self,first,last,pay,employees=None):
        super.__init__(self,first,last,pay)
        if employees is None:
            self.employees = []
        else:
            self.employees=employees
            
    def add_emp(self,emp):
        if emp not in self.employees:
            self.employees.append(emp)
        
    def remove_emp(self,emp):
        if emp in self.employees:
            self.employees.remove(emp)
            
            
    def print_emp(self):
        for emp in self.employees:
            print(emp.fullname())
            
            
dev_1 = Develper('Rae','Chiang',70000)
mgr_1 = Manager('Sue','Smith',90000,[dev_1])

print(isinstance(mgr_1,Manager)) #true
print(isinstance(mgr_1,Employee)) #true
print(isinstance(mgr_1,Developer)) #false
print(issubclass(Developer,Employee)) #true
print(issubclass(Manager,Employee)) #true
print(issubclass(Manager,Developer)) #false






