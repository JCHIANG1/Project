--what is inheritance?
the object of the subclasses (derived classes) can call the method and property from the parent class
For example, car class and motor cycle class are classes that inherit from vehicle class or we can say that car class and motor cycle class
are subclasses of vehicle class because they share same property and method with vehicle class.

--benefit
1) code reuse: reuse the code from parent class but at the same time you can customize your own class
2) extensibility
3) readability

class Vehicle:
    def general_usage(self):
        print("general use: transportation")
        
class Car(Vehicle): #here the syntex means the car class is derived from vehicle class
    def __init__(self):
        print("I'm car")
        self.wheels=4
        self.has_roof=True
    
    def specific_usage(self):
        print("specific use: commute to work, vacation with family")
     
class MotorCycle(Vehicle):
    def __init__(self):
        print("I'm motor cycle")
        self.wheel=2
        self.roof=False
        
    def specific_usuage(self):
        self.general_usuage()
        print("specific use: road trip, racing")
        
#create car and motor cycle object
c = Car()  
#I'm car

c.specific_usage() 
#specific use: commute to work, vacation with family

#we can use the method from parent class
c.general_usage()  
#general use: transportation

m=MotoCycle()
#I'm motor cycle

m.specific_usage() 
#general use: transportation
#specific use: road trip, racing


#isinstance vs. issubclass methods

#whether c is the car instance?
print(isinstance(c,Car))
#True

#whether c is subclass of vehicle
print(issubclass(Car,Vehicle))
#True

--------------------------------------------------------------------------------------
#Mutiple Inherience
class Father():
    def gardening(self):
        print("I enjoy gardening")

class Mother():
    def cooking(self):
        print("I love cooking")

#a class inherit from two classes
class Child(Father,Mother):
    def sports(self):
        print("I enjoy sprots")
        
c=Child()
c.gardening()
#I enjoy gardening

c.cooking()
#I love cooking

c.sports()
#I enjoy sprots

#a class inherit from two classes
class Father():
    def skills(self):
        print("gardening,programming")

class Mother():
    def skills(self):
        print("cooking,art")

#a class inherit from two classes
class Child(Father,Mother):
    def skills(self):
        print("sprots")
        
c=Child()
c.skills()
#sports


#a class inherit from two classes
class Child2(Father,Mother):
    def skills(self):
        Father.skills(self)
        Mother.skills(self)
        print("sprots")

c=Child2()
c.skills()
#gardening,programming
#cooking,art
#sports

-------------------------------------------------------------------------------------

class dog():
    def __init__(self,name,age):
        self.name=name
        self.age=age
    
    def speak(self):
        print("Hi I am",self.name, "and I am",self.age,"years old.")
        
    def talk(self):
        print("bark!")

#dog will be the parent class of cat children class
class cat(dog):
    def__init__(self,name,age,color):
        #the super() automatically exercute the init method in dog class
        super().__init__(name,age)
        self.color = color

    def talk(self):
        print("Meow!")

tim = cat("tim",5,"blue")

--instead of printing "bark" it prints "meow" 
--the method has the same name with the parent class method will overwrite the inherited method 
tim.talk() 

--with the same concept above
class cat(dog):
    def __init__(self,name,age,color):
        super().init__(name,age)
        self.name="tech"

tim.speak()
--the output=> Hi I am tech and I am 5 years old.

--------------------------------------------------------------------------------------------------------
class vehicle():
    def __init__(self,price,gas,color):
        self.price = price
        self.gas = gas
        self.color =color
        
    def fillUpTank(self):
        self.gas=100
    
    def emptyTank(self):
        self.gas=0
        
    def gasLeft(self):
        return self.gas
        
class car(vehicle):
    def __init__(self,price,gas,color,speed):
        super.__init(price,gas,color)
        self.speed=speed
     
    def beep(self):
        print("Beep Beep")
        
    
class truck(vehicle):
    def __init__(self,price,gas,color,tires):
        super().__init__(price,gas,color,tires)
        self.tires = tires
    
    def beep(self):
        print("Honk Honk")
